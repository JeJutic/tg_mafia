// Code generated by mockery v2.23.4. DO NOT EDIT.

package game

import (
	game "github.com/jejutic/tg_mafia/pkg"
	mock "github.com/stretchr/testify/mock"
)

// MockEventOutput is an autogenerated mock type for the EventOutput type
type MockEventOutput struct {
	mock.Mock
}

type MockEventOutput_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEventOutput) EXPECT() *MockEventOutput_Expecter {
	return &MockEventOutput_Expecter{mock: &_m.Mock}
}

// HandleActEnded provides a mock function with given fields: _a0
func (_m *MockEventOutput) HandleActEnded(_a0 game.ActEndedEvent) {
	_m.Called(_a0)
}

// MockEventOutput_HandleActEnded_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleActEnded'
type MockEventOutput_HandleActEnded_Call struct {
	*mock.Call
}

// HandleActEnded is a helper method to define mock.On call
//   - _a0 game.ActEndedEvent
func (_e *MockEventOutput_Expecter) HandleActEnded(_a0 interface{}) *MockEventOutput_HandleActEnded_Call {
	return &MockEventOutput_HandleActEnded_Call{Call: _e.mock.On("HandleActEnded", _a0)}
}

func (_c *MockEventOutput_HandleActEnded_Call) Run(run func(_a0 game.ActEndedEvent)) *MockEventOutput_HandleActEnded_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(game.ActEndedEvent))
	})
	return _c
}

func (_c *MockEventOutput_HandleActEnded_Call) Return() *MockEventOutput_HandleActEnded_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventOutput_HandleActEnded_Call) RunAndReturn(run func(game.ActEndedEvent)) *MockEventOutput_HandleActEnded_Call {
	_c.Call.Return(run)
	return _c
}

// HandleAlreadyVoted provides a mock function with given fields: _a0
func (_m *MockEventOutput) HandleAlreadyVoted(_a0 game.AlreadyVotedEvent) {
	_m.Called(_a0)
}

// MockEventOutput_HandleAlreadyVoted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleAlreadyVoted'
type MockEventOutput_HandleAlreadyVoted_Call struct {
	*mock.Call
}

// HandleAlreadyVoted is a helper method to define mock.On call
//   - _a0 game.AlreadyVotedEvent
func (_e *MockEventOutput_Expecter) HandleAlreadyVoted(_a0 interface{}) *MockEventOutput_HandleAlreadyVoted_Call {
	return &MockEventOutput_HandleAlreadyVoted_Call{Call: _e.mock.On("HandleAlreadyVoted", _a0)}
}

func (_c *MockEventOutput_HandleAlreadyVoted_Call) Run(run func(_a0 game.AlreadyVotedEvent)) *MockEventOutput_HandleAlreadyVoted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(game.AlreadyVotedEvent))
	})
	return _c
}

func (_c *MockEventOutput_HandleAlreadyVoted_Call) Return() *MockEventOutput_HandleAlreadyVoted_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventOutput_HandleAlreadyVoted_Call) RunAndReturn(run func(game.AlreadyVotedEvent)) *MockEventOutput_HandleAlreadyVoted_Call {
	_c.Call.Return(run)
	return _c
}

// HandleFirstDay provides a mock function with given fields: _a0
func (_m *MockEventOutput) HandleFirstDay(_a0 game.FirstDayEvent) {
	_m.Called(_a0)
}

// MockEventOutput_HandleFirstDay_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleFirstDay'
type MockEventOutput_HandleFirstDay_Call struct {
	*mock.Call
}

// HandleFirstDay is a helper method to define mock.On call
//   - _a0 game.FirstDayEvent
func (_e *MockEventOutput_Expecter) HandleFirstDay(_a0 interface{}) *MockEventOutput_HandleFirstDay_Call {
	return &MockEventOutput_HandleFirstDay_Call{Call: _e.mock.On("HandleFirstDay", _a0)}
}

func (_c *MockEventOutput_HandleFirstDay_Call) Run(run func(_a0 game.FirstDayEvent)) *MockEventOutput_HandleFirstDay_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(game.FirstDayEvent))
	})
	return _c
}

func (_c *MockEventOutput_HandleFirstDay_Call) Return() *MockEventOutput_HandleFirstDay_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventOutput_HandleFirstDay_Call) RunAndReturn(run func(game.FirstDayEvent)) *MockEventOutput_HandleFirstDay_Call {
	_c.Call.Return(run)
	return _c
}

// HandleNightAct provides a mock function with given fields: _a0
func (_m *MockEventOutput) HandleNightAct(_a0 game.NightActEvent) {
	_m.Called(_a0)
}

// MockEventOutput_HandleNightAct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleNightAct'
type MockEventOutput_HandleNightAct_Call struct {
	*mock.Call
}

// HandleNightAct is a helper method to define mock.On call
//   - _a0 game.NightActEvent
func (_e *MockEventOutput_Expecter) HandleNightAct(_a0 interface{}) *MockEventOutput_HandleNightAct_Call {
	return &MockEventOutput_HandleNightAct_Call{Call: _e.mock.On("HandleNightAct", _a0)}
}

func (_c *MockEventOutput_HandleNightAct_Call) Run(run func(_a0 game.NightActEvent)) *MockEventOutput_HandleNightAct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(game.NightActEvent))
	})
	return _c
}

func (_c *MockEventOutput_HandleNightAct_Call) Return() *MockEventOutput_HandleNightAct_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventOutput_HandleNightAct_Call) RunAndReturn(run func(game.NightActEvent)) *MockEventOutput_HandleNightAct_Call {
	_c.Call.Return(run)
	return _c
}

// HandleNightEnded provides a mock function with given fields: _a0
func (_m *MockEventOutput) HandleNightEnded(_a0 game.NightEndedEvent) {
	_m.Called(_a0)
}

// MockEventOutput_HandleNightEnded_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleNightEnded'
type MockEventOutput_HandleNightEnded_Call struct {
	*mock.Call
}

// HandleNightEnded is a helper method to define mock.On call
//   - _a0 game.NightEndedEvent
func (_e *MockEventOutput_Expecter) HandleNightEnded(_a0 interface{}) *MockEventOutput_HandleNightEnded_Call {
	return &MockEventOutput_HandleNightEnded_Call{Call: _e.mock.On("HandleNightEnded", _a0)}
}

func (_c *MockEventOutput_HandleNightEnded_Call) Run(run func(_a0 game.NightEndedEvent)) *MockEventOutput_HandleNightEnded_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(game.NightEndedEvent))
	})
	return _c
}

func (_c *MockEventOutput_HandleNightEnded_Call) Return() *MockEventOutput_HandleNightEnded_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventOutput_HandleNightEnded_Call) RunAndReturn(run func(game.NightEndedEvent)) *MockEventOutput_HandleNightEnded_Call {
	_c.Call.Return(run)
	return _c
}

// HandleNightStarted provides a mock function with given fields: _a0
func (_m *MockEventOutput) HandleNightStarted(_a0 game.NightStartedEvent) {
	_m.Called(_a0)
}

// MockEventOutput_HandleNightStarted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleNightStarted'
type MockEventOutput_HandleNightStarted_Call struct {
	*mock.Call
}

// HandleNightStarted is a helper method to define mock.On call
//   - _a0 game.NightStartedEvent
func (_e *MockEventOutput_Expecter) HandleNightStarted(_a0 interface{}) *MockEventOutput_HandleNightStarted_Call {
	return &MockEventOutput_HandleNightStarted_Call{Call: _e.mock.On("HandleNightStarted", _a0)}
}

func (_c *MockEventOutput_HandleNightStarted_Call) Run(run func(_a0 game.NightStartedEvent)) *MockEventOutput_HandleNightStarted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(game.NightStartedEvent))
	})
	return _c
}

func (_c *MockEventOutput_HandleNightStarted_Call) Return() *MockEventOutput_HandleNightStarted_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventOutput_HandleNightStarted_Call) RunAndReturn(run func(game.NightStartedEvent)) *MockEventOutput_HandleNightStarted_Call {
	_c.Call.Return(run)
	return _c
}

// HandleNotifyStopGame provides a mock function with given fields: _a0
func (_m *MockEventOutput) HandleNotifyStopGame(_a0 game.NotifyStopGameEvent) {
	_m.Called(_a0)
}

// MockEventOutput_HandleNotifyStopGame_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleNotifyStopGame'
type MockEventOutput_HandleNotifyStopGame_Call struct {
	*mock.Call
}

// HandleNotifyStopGame is a helper method to define mock.On call
//   - _a0 game.NotifyStopGameEvent
func (_e *MockEventOutput_Expecter) HandleNotifyStopGame(_a0 interface{}) *MockEventOutput_HandleNotifyStopGame_Call {
	return &MockEventOutput_HandleNotifyStopGame_Call{Call: _e.mock.On("HandleNotifyStopGame", _a0)}
}

func (_c *MockEventOutput_HandleNotifyStopGame_Call) Run(run func(_a0 game.NotifyStopGameEvent)) *MockEventOutput_HandleNotifyStopGame_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(game.NotifyStopGameEvent))
	})
	return _c
}

func (_c *MockEventOutput_HandleNotifyStopGame_Call) Return() *MockEventOutput_HandleNotifyStopGame_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventOutput_HandleNotifyStopGame_Call) RunAndReturn(run func(game.NotifyStopGameEvent)) *MockEventOutput_HandleNotifyStopGame_Call {
	_c.Call.Return(run)
	return _c
}

// HandleUnableToVote provides a mock function with given fields: _a0
func (_m *MockEventOutput) HandleUnableToVote(_a0 game.UnableToVoteEvent) {
	_m.Called(_a0)
}

// MockEventOutput_HandleUnableToVote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleUnableToVote'
type MockEventOutput_HandleUnableToVote_Call struct {
	*mock.Call
}

// HandleUnableToVote is a helper method to define mock.On call
//   - _a0 game.UnableToVoteEvent
func (_e *MockEventOutput_Expecter) HandleUnableToVote(_a0 interface{}) *MockEventOutput_HandleUnableToVote_Call {
	return &MockEventOutput_HandleUnableToVote_Call{Call: _e.mock.On("HandleUnableToVote", _a0)}
}

func (_c *MockEventOutput_HandleUnableToVote_Call) Run(run func(_a0 game.UnableToVoteEvent)) *MockEventOutput_HandleUnableToVote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(game.UnableToVoteEvent))
	})
	return _c
}

func (_c *MockEventOutput_HandleUnableToVote_Call) Return() *MockEventOutput_HandleUnableToVote_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventOutput_HandleUnableToVote_Call) RunAndReturn(run func(game.UnableToVoteEvent)) *MockEventOutput_HandleUnableToVote_Call {
	_c.Call.Return(run)
	return _c
}

// HandleUnexpectedActTrial provides a mock function with given fields: _a0
func (_m *MockEventOutput) HandleUnexpectedActTrial(_a0 game.UnexpectedActTrialEvent) {
	_m.Called(_a0)
}

// MockEventOutput_HandleUnexpectedActTrial_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleUnexpectedActTrial'
type MockEventOutput_HandleUnexpectedActTrial_Call struct {
	*mock.Call
}

// HandleUnexpectedActTrial is a helper method to define mock.On call
//   - _a0 game.UnexpectedActTrialEvent
func (_e *MockEventOutput_Expecter) HandleUnexpectedActTrial(_a0 interface{}) *MockEventOutput_HandleUnexpectedActTrial_Call {
	return &MockEventOutput_HandleUnexpectedActTrial_Call{Call: _e.mock.On("HandleUnexpectedActTrial", _a0)}
}

func (_c *MockEventOutput_HandleUnexpectedActTrial_Call) Run(run func(_a0 game.UnexpectedActTrialEvent)) *MockEventOutput_HandleUnexpectedActTrial_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(game.UnexpectedActTrialEvent))
	})
	return _c
}

func (_c *MockEventOutput_HandleUnexpectedActTrial_Call) Return() *MockEventOutput_HandleUnexpectedActTrial_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventOutput_HandleUnexpectedActTrial_Call) RunAndReturn(run func(game.UnexpectedActTrialEvent)) *MockEventOutput_HandleUnexpectedActTrial_Call {
	_c.Call.Return(run)
	return _c
}

// HandleUnsupportedAct provides a mock function with given fields: _a0
func (_m *MockEventOutput) HandleUnsupportedAct(_a0 game.UnsupportedActEvent) {
	_m.Called(_a0)
}

// MockEventOutput_HandleUnsupportedAct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleUnsupportedAct'
type MockEventOutput_HandleUnsupportedAct_Call struct {
	*mock.Call
}

// HandleUnsupportedAct is a helper method to define mock.On call
//   - _a0 game.UnsupportedActEvent
func (_e *MockEventOutput_Expecter) HandleUnsupportedAct(_a0 interface{}) *MockEventOutput_HandleUnsupportedAct_Call {
	return &MockEventOutput_HandleUnsupportedAct_Call{Call: _e.mock.On("HandleUnsupportedAct", _a0)}
}

func (_c *MockEventOutput_HandleUnsupportedAct_Call) Run(run func(_a0 game.UnsupportedActEvent)) *MockEventOutput_HandleUnsupportedAct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(game.UnsupportedActEvent))
	})
	return _c
}

func (_c *MockEventOutput_HandleUnsupportedAct_Call) Return() *MockEventOutput_HandleUnsupportedAct_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventOutput_HandleUnsupportedAct_Call) RunAndReturn(run func(game.UnsupportedActEvent)) *MockEventOutput_HandleUnsupportedAct_Call {
	_c.Call.Return(run)
	return _c
}

// HandleVotingEnded provides a mock function with given fields: _a0
func (_m *MockEventOutput) HandleVotingEnded(_a0 game.VotingEndedEvent) {
	_m.Called(_a0)
}

// MockEventOutput_HandleVotingEnded_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleVotingEnded'
type MockEventOutput_HandleVotingEnded_Call struct {
	*mock.Call
}

// HandleVotingEnded is a helper method to define mock.On call
//   - _a0 game.VotingEndedEvent
func (_e *MockEventOutput_Expecter) HandleVotingEnded(_a0 interface{}) *MockEventOutput_HandleVotingEnded_Call {
	return &MockEventOutput_HandleVotingEnded_Call{Call: _e.mock.On("HandleVotingEnded", _a0)}
}

func (_c *MockEventOutput_HandleVotingEnded_Call) Run(run func(_a0 game.VotingEndedEvent)) *MockEventOutput_HandleVotingEnded_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(game.VotingEndedEvent))
	})
	return _c
}

func (_c *MockEventOutput_HandleVotingEnded_Call) Return() *MockEventOutput_HandleVotingEnded_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventOutput_HandleVotingEnded_Call) RunAndReturn(run func(game.VotingEndedEvent)) *MockEventOutput_HandleVotingEnded_Call {
	_c.Call.Return(run)
	return _c
}

// HandleVotingStarted provides a mock function with given fields: _a0
func (_m *MockEventOutput) HandleVotingStarted(_a0 game.VotingStartedEvent) {
	_m.Called(_a0)
}

// MockEventOutput_HandleVotingStarted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleVotingStarted'
type MockEventOutput_HandleVotingStarted_Call struct {
	*mock.Call
}

// HandleVotingStarted is a helper method to define mock.On call
//   - _a0 game.VotingStartedEvent
func (_e *MockEventOutput_Expecter) HandleVotingStarted(_a0 interface{}) *MockEventOutput_HandleVotingStarted_Call {
	return &MockEventOutput_HandleVotingStarted_Call{Call: _e.mock.On("HandleVotingStarted", _a0)}
}

func (_c *MockEventOutput_HandleVotingStarted_Call) Run(run func(_a0 game.VotingStartedEvent)) *MockEventOutput_HandleVotingStarted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(game.VotingStartedEvent))
	})
	return _c
}

func (_c *MockEventOutput_HandleVotingStarted_Call) Return() *MockEventOutput_HandleVotingStarted_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventOutput_HandleVotingStarted_Call) RunAndReturn(run func(game.VotingStartedEvent)) *MockEventOutput_HandleVotingStarted_Call {
	_c.Call.Return(run)
	return _c
}

// HandleWin provides a mock function with given fields: _a0
func (_m *MockEventOutput) HandleWin(_a0 game.WinEvent) {
	_m.Called(_a0)
}

// MockEventOutput_HandleWin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleWin'
type MockEventOutput_HandleWin_Call struct {
	*mock.Call
}

// HandleWin is a helper method to define mock.On call
//   - _a0 game.WinEvent
func (_e *MockEventOutput_Expecter) HandleWin(_a0 interface{}) *MockEventOutput_HandleWin_Call {
	return &MockEventOutput_HandleWin_Call{Call: _e.mock.On("HandleWin", _a0)}
}

func (_c *MockEventOutput_HandleWin_Call) Run(run func(_a0 game.WinEvent)) *MockEventOutput_HandleWin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(game.WinEvent))
	})
	return _c
}

func (_c *MockEventOutput_HandleWin_Call) Return() *MockEventOutput_HandleWin_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventOutput_HandleWin_Call) RunAndReturn(run func(game.WinEvent)) *MockEventOutput_HandleWin_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEventOutput creates a new instance of MockEventOutput. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEventOutput(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEventOutput {
	mock := &MockEventOutput{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
